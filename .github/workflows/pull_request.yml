name: PR Update

on:
  pull_request:
  workflow_dispatch:

env:
  pr_id: ${{ github.event.number }}

concurrency:
  group: pr-update-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  setup:
    name: NPM install & cache

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set nodeJs version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.node_version }}

      - name: node_modules cache
        id: node-modules-cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-npm
          cache_key: ${{ vars.node_version }}-${{ hashFiles('package-lock.json') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_key }}
          restore-keys: ${{ runner.os }}-${{ env.cache_name }}-

      - name: NPM install
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

  ready-for-release:
    name: Ready for release

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set nodeJs version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.node_version }}

      - name: Read version from package file
        id: local_version
        run: |
          echo "version=$(npm run current-version -s)" >> "$GITHUB_OUTPUT"

      - name: Get most recent version
        id: published_version
        run: |
          echo "version=$(npm view eslint-config-amalitsky version)" >> "$GITHUB_OUTPUT"

      - name: Compare versions
        if: steps.local_version.outputs.version == steps.published_version.outputs.version
        run: exit 1

  lint:
    name: Linters

    runs-on: ubuntu-latest

    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set nodeJs version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.node_version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-npm
          cache_key: ${{ vars.node_version }}-${{ hashFiles('package-lock.json') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_key }}

      - name: Lint the code
        run: npm run lint

  build:
    name: Build the package

    runs-on: ubuntu-latest

    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set nodeJs version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.node_version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        env:
          cache_name: node-modules-npm
          cache_key: ${{ vars.node_version }}-${{ hashFiles('package-lock.json') }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache_name }}-${{ env.cache_key }}

      - name: Build the package
        run: npm run build
